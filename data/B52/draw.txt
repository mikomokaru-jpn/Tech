//「線」構造体struct LineAttribute{    var pointList: [CGPoint]    //点の集合    var lineWidth: CGFloat      //線の太さ    var lineColor: CGColor      //線の色}var lineAttrList = [LineAttribute]()    //「線」構造体の配列    //マウスダウンoverride func mouseDown(with event: NSEvent) {    //1ラインの空オブジェクトを作成する    let attr = LineAttribute(pointList: [CGPoint](),                             lineWidth: self.lineWidth,                             lineColor: self.lineColor)    self.lineAttrList.append(attr)}//マウスドラッグoverride func mouseDragged(with event: NSEvent) {    let point = self.convert(event.locationInWindow, from: nil)    //点を追加する    self.lineAttrList[lineAttrList.count - 1].pointList.append(point)    self.needsDisplay = true    }//ビューの再描画・グラフィックコンテキストに直接書き出すoverride func draw(_ dirtyRect: NSRect) {    if let context = NSGraphicsContext.current?.cgContext{               if let image = self.cgImage{            //イメージファイルの画像を描画            context.draw(image, in: self.cgImageRect)        }        //線を描画する        for i in 0 ..< lineAttrList.count{            if lineAttrList[i].pointList.count < 2 {                continue //点が一つしかない            }            //点と点の間に線を引く            for j in 0 ..< (lineAttrList[i].pointList.count - 1){                if lineAttrList[i].pointList.count > 1{                    context.setLineWidth(lineAttrList[i].lineWidth)                    context.setStrokeColor(lineAttrList[i].lineColor)                    context.move(to: lineAttrList[i].pointList[j])                    context.addLine(to: lineAttrList[i].pointList[j+1])                    context.strokePath()                }            }        }    }}