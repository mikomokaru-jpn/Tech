//**** dispatch_asyncによる非同期処理 & セマフォによる同期 ****
-(void)op4{
    NSLog(@"(1) dispatch_asyncによる非同期処理 & セマフォ: %@",
                                  [NSThread currentThread]);
    //セマフォオブジェクトを作成する
    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);
    //別スレッド・CONCURRENT
    dispatch_queue_t queue = 
      dispatch_queue_create("com.mikomokaru", DISPATCH_QUEUE_SERIAL);
    //メインスレッドと非同期処理
    dispatch_async(queue, ^{
        for(int i=0; i<10; i++){
            [NSThread sleepForTimeInterval:0.2];
            NSLog(@"(3):%d: %@",i,[NSThread currentThread]);
            dispatch_async(dispatch_get_main_queue(), ^{
                //途中ののCallBack：キューされるだけ。処理は(5)の後で実行される。
                _btnStart.enabled = YES;
                NSLog(@"(5):%d: %@",i, [NSThread currentThread]);
            });
        }
        dispatch_async(dispatch_get_main_queue(), ^{
            //終了時のCallBack：キューされるだけ。処理は(5)の後で実行される。
            _btnStart.enabled = YES;
            NSLog(@"(6): %@",  [NSThread currentThread]);
        });
        //メインスレッドに再開を通知
        dispatch_semaphore_signal(semaphore);
    });
    NSLog(@"(2): %@",  [NSThread currentThread]);
    //別スレッドの処理の終了を待つ
    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);  
    NSLog(@"(4): %@",  [NSThread currentThread]);
}