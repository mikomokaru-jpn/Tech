@interface UAServerRequest : NSObject+(NSArray*)postSync:(NSString*)cmd param:(NSString*)param;@end@implementation UAServerRequest+(NSArray*)postSync:(NSString*)cmd param:(NSString*)param{    //POSTパラメータ文字列をNSData形式に変換    NSData *paramData = [param dataUsingEncoding:NSUTF8StringEncoding];    //URLオブジェクトの作成    NSURL *url = [NSURL URLWithString:cmd];    //パラメータの設定    NSMutableURLRequest *request= [NSMutableURLRequest requestWithURL:url];    [request setHTTPMethod:@"POST"];    [request setValue:@"application/json" forHTTPHeaderField:@"Accept"];    [request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];    [request setValue:[NSString stringWithFormat:@"%ld",[paramData length]]     forHTTPHeaderField:@"Content-Length"];    [request setHTTPBody:paramData];        //同期用セマフォの作成    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);    __block NSArray* responseList = nil;    //ネットワーク通信オブジェクトの生成（一時セッション）    NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration ephemeralSessionConfiguration];    NSURLSession *session = [NSURLSession sessionWithConfiguration:configuration];    NSURLSessionDataTask *task = [session dataTaskWithRequest:request        completionHandler:^(NSData * _Nullable data,                            NSURLResponse * _Nullable response,                            NSError * _Nullable error) {        if (error) {            NSLog(@"%@", error);            dispatch_semaphore_signal(semaphore); //taskの終了を通知する            return;        }        NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;        if (httpResponse.statusCode != 200) {            NSLog(@"statusCode:%ld", httpResponse.statusCode);            dispatch_semaphore_signal(semaphore); //taskの終了を通知する            return;        }        responseList =  [NSJSONSerialization JSONObjectWithData:data                              options:NSJSONReadingMutableContainers                                                           error:nil];        dispatch_semaphore_signal(semaphore);    }];    [task resume];    //taskの終了を待つ    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);    /* [request setTimeoutInterval:10]; */    return responseList;}@end