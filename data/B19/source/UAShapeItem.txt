//------------------------------------------------------------------------------// UAShapeItem.swift//------------------------------------------------------------------------------import Cocoaclass UAShapeItem: NSView {    var coment: String = "---"; //for debug    var origin: CGPoint    var size: CGSize = CGSize(width:0, height:0)    var unUsed: Bool = false    //描画する図形の定義    var shapeRect: CGRect = CGRect(x:0, y:0, width:0, height:0)    var lineWidth: CGFloat = 1.0    var lineColor: CGColor = NSColor.black.cgColor    //移動・変形に関するプロパティ    let kLineWidth: CGFloat = 5.0    var transformKind:NSInteger = 0  //変形方法    var xFrom: CGFloat = 0    var xTo: CGFloat = 0    var yFrom: CGFloat = 0    var  yTo: CGFloat = 0    var fromPoint: CGPoint = CGPoint(x: 0, y: 0)    var toPoint: CGPoint = CGPoint(x: 0, y: 0)    //指定イニシャライザ    init(frame:CGRect, point: CGPoint){        origin = point        super.init(frame: frame)    }    required init?(coder aDecoder: NSCoder) {        fatalError("init(coder:) has not been implemented")    }    //ビューの再描画    override func draw(_ dirtyRect: NSRect) {        let context:CGContext? = NSGraphicsContext.current?.cgContext        context?.addRect(shapeRect)        context?.setLineWidth(lineWidth)        context?.setStrokeColor(lineColor)        context?.strokePath()    }    //図形描画中の処理：イメージの表示    func shapeCreating(point: CGPoint){        size.width = point.x - origin.x        size.height = point.y - origin.y        shapeRect = CGRect(x:origin.x, y:origin.y, width:size.width, height:size.height) //矩形の位置と大きさ        self.needsDisplay = true    }    //図形描画の完了    func shapeCreated(toPoint:CGPoint){        self.shapeCreating(point: toPoint)        self.selectOn()    }    //図形の移動・拡大・縮小の開始    func startTransform( _ point:CGPoint){        fromPoint = point;        // 開始点から変形方法を判定する        if self.onTheCorner(fromPoint){            //四隅 ->　拡大/縮小            transformKind = 1;        }else if self.onTheHolLine(fromPoint){            //上辺/下辺 ->　垂直方向に拡大/縮小            transformKind = 2;        }else if self.onTheVelLine(fromPoint){            //右辺/左辺 ->　水平方向に拡大/縮小            transformKind = 3;        }else if self.inTheArea(fromPoint){            //矩形内 -> 移動            transformKind = 4;        }        return;    }    //図形の移動・拡大・縮小中    func updateTransform(_ toPoint: CGPoint){        if transformKind == 1{            self.transformingXY(toPoint)        }else if transformKind == 2{            self.transformingY(toPoint)        }else if transformKind == 3{            self.transformingX(toPoint)        }else if transformKind == 4{            self.moving(toPoint)        }    }    //図形の移動・拡大・縮小の完了    func performTransform(_ point: CGPoint){        toPoint = point;        if transformKind == 1{            //四隅 ->　拡大/縮小            self.resizeYFrom(fromPoint, toPoint)            self.resizeXFrom(fromPoint, toPoint)        }else if transformKind == 2{            //上辺/下辺 ->　垂直方向に拡大/縮小            self.resizeYFrom(fromPoint, toPoint)        }else if transformKind == 3{            //右辺/左辺 ->　水平方向に拡大/縮小            self.resizeXFrom(fromPoint, toPoint)        }else if transformKind == 4{            //矩形内 -> 移動            self.move(fromPoint, toPoint)        }else{            print(String(format:"論理エラーだよ　performTransform　transformKLind=%ld", transformKind))        }        return    }    //図形を選択状態にする    func selectOn(){        lineWidth = 2;                            //枠線の太さ        lineColor = NSColor.red.cgColor;        //枠線の色        self.needsDisplay = true    }    //図形を選択状態を解除する    func selectOff(){        lineWidth = 1;                             //枠線の太さ        lineColor = NSColor.black.cgColor;       //枠線の色        self.needsDisplay = true    }    //縦・横方向に拡大/縮小中    func transformingXY(_ point:CGPoint){        var width: CGFloat = 0        var height: CGFloat = 0        var basePoint:CGPoint  = origin        if  !self.nearEqualXonSide(fromPoint.x) && !self.nearEqualYonSide(fromPoint.y){            //起点が原点の対角            width = size.width + (point.x - fromPoint.x)            height = size.height + (point.y - fromPoint.y)            }else if !self.nearEqualXonSide(fromPoint.x) && self.nearEqualYonSide(fromPoint.y){            //起点は原点の水平方向            basePoint.y = origin.y + size.height;            width = size.width + (point.x - fromPoint.x);            height = -size.height + (point.y - fromPoint.y);            }else if self.nearEqualXonSide(fromPoint.x) && !self.nearEqualYonSide(fromPoint.y){            //起点は原点の垂直方向            basePoint.x = origin.x + size.width;            width = -size.width + (point.x - fromPoint.x);            height = size.height + (point.y - fromPoint.y);            }else if self.nearEqualXonSide(fromPoint.x) && self.nearEqualYonSide(fromPoint.y){            //起点が原点            basePoint.y = origin.y + size.height;            basePoint.x = origin.x + size.width;            width = -size.width + (point.x - fromPoint.x);            height = -size.height + (point.y - fromPoint.y);        }        shapeRect = CGRect(x:basePoint.x, y:basePoint.y, width:width, height:height); //矩形の位置と大きさ        self.needsDisplay = true    }        //横方向に拡大/縮小中    func transformingX(_ point: CGPoint){        //水平方向に拡大/縮小        var distance:CGFloat = 0.0        distance = point.x - fromPoint.x        if self.nearEqualXonSide(fromPoint.x){            //自分側            let x:CGFloat = origin.x + distance            let width:CGFloat = size.width - distance            shapeRect = CGRect(x:x, y:origin.y, width:width, height:size.height) //矩形の位置と大きさ        }else{            //対辺側            let width: CGFloat = size.width + distance;            shapeRect = CGRect(x:origin.x, y:origin.y, width:width, height:size.height) //矩形の位置と大きさ        }        self.needsDisplay = true;    }        //縦方向に拡大/縮小中    func transformingY(_ point:CGPoint){        //垂直方向に拡大/縮小        var distance:CGFloat = 0.0        distance = point.y - fromPoint.y        if self.nearEqualYonSide(fromPoint.y){            //自分側            let y:CGFloat = origin.y + distance            let height:CGFloat = size.height - distance            shapeRect = CGRect(x:origin.x, y:y, width:size.width, height:height) //矩形の位置と大きさ        }else{            //対辺側            let height:CGFloat = size.height + distance            shapeRect = CGRect(x:origin.x, y:origin.y, width:size.width, height:height) //矩形の位置と大きさ        }        self.needsDisplay = true;    }        //移動中    func moving(_ point:CGPoint){        //原点までの距離        let distance:CGSize = CGSize(width:fromPoint.x-origin.x, height:fromPoint.y-origin.y)        let nextPoint:CGPoint = CGPoint(x:point.x-distance.width, y:point.y-distance.height)        shapeRect = CGRect(x:nextPoint.x, y:nextPoint.y, width:size.width, height:size.height) //矩形の位置と大きさ        self.needsDisplay = true    }        //図形のサイズ変更 横方向    func resizeXFrom(_ fromPoint:CGPoint, _ toPoint: CGPoint){        var distance: CGFloat = 0.0        distance = toPoint.x - fromPoint.x        if self.nearEqualXonSide(fromPoint.x){            //自分側            origin.x += distance            size.width -= distance        }else{            //対辺側            size.width += distance;        }        shapeRect = CGRect(x:origin.x, y:origin.y, width:size.width, height:size.height) //矩形の位置と大きさ        self.needsDisplay = true    }    //図形のサイズ変更 縦方向    func resizeYFrom(_ fromPoint: CGPoint, _ toPoint:CGPoint){        var distance:CGFloat = 0.0        distance = toPoint.y - fromPoint.y;        if self.nearEqualYonSide(fromPoint.y){            //自分側            origin.y += distance;            size.height -= distance;        }else{            //対辺側            size.height += distance;        }        shapeRect = CGRect(x:origin.x, y:origin.y, width:size.width, height:size.height) //矩形の位置と大きさ        self.needsDisplay = true    }    //図形の移動    func move(_ fromPoint: CGPoint, _ toPoint: CGPoint){        origin.x += toPoint.x - fromPoint.x;        origin.y += toPoint.y - fromPoint.y;        shapeRect = CGRect(x:origin.x, y:origin.y, width:size.width, height:size.height) //矩形の位置と大きさ        self.needsDisplay = true    }    // ---- 点の近似 -----    //点同士は近いか？    func nearToPoint(_ point: CGPoint) -> Bool{        if fabs(origin.x - point.x) <= kLineWidth &&            fabs(origin.y - point.y) <= kLineWidth {            return true;        }        return false;    }    //点は矩形の中か？    func inTheArea(_ point: CGPoint) -> Bool{        self.defineSpan()        if (point.x >= xFrom - kLineWidth && point.x <= xTo + kLineWidth){            if (point.y >= yFrom - kLineWidth && point.y <= yTo + kLineWidth){                return true;            }        }        return false;    }    //点は矩形の水平線上か？    func onTheHolLine(_ point: CGPoint) -> Bool{        self.defineSpan()        if self.nearEqualYbothSides(point.y){            if (point.x >= xFrom && point.x <= xTo){                return true            }        }        return false    }    //点は矩形の垂直線上か？    func onTheVelLine(_ point: CGPoint) -> Bool{        self.defineSpan()        if self.nearEqualXbothSides(point.x){            if (point.y >= yFrom && point.y <= yTo){                return true            }        }        return false    }    //点は矩形の線上か？    func onTheLine(_ point: CGPoint) -> Bool{        return (self.onTheVelLine(point) || self.onTheHolLine(point));    }        //点は矩形の角の上か？    func onTheCorner(_ point: CGPoint) -> Bool{        self.defineSpan();        if self.nearEqualXbothSides(point.x) && self.nearEqualYbothSides(point.y){            return true        }        return false    }    //X値とほぼ等値か？（自分側と対辺側）    func nearEqualXbothSides(_ x: CGFloat) -> Bool{        return (self.nearEqualXonSide(x) || self.nearEqualXoffSide(x))    }    //Y値とほぼ等値か？（自分側と対辺側）    func nearEqualYbothSides(_ y: CGFloat) -> Bool{        return (self.nearEqualYonSide(y) || self.nearEqualYoffSide(y))    }        //X値とほぼ等値か？（自分側）    func nearEqualXonSide(_ x:CGFloat) -> Bool{        if (x <= origin.x+kLineWidth && x >= origin.x-kLineWidth){            return true        }        return false    }    //X値とほぼ等値か？（対辺側）    func nearEqualXoffSide(_ x: CGFloat) -> Bool{        if (x <= origin.x+size.width+kLineWidth && x >= origin.x+size.width-kLineWidth){            return true        }        return false    }    //Y値とほぼ等値か？（自分側）    func nearEqualYonSide(_ y: CGFloat) -> Bool{        if (y <= origin.y+kLineWidth && y >= origin.y-kLineWidth){            return true //自分側        }        return false    }    //Y値とほぼ等値か？（対辺側）    func nearEqualYoffSide(_ y: CGFloat) -> Bool{        if (y <= origin.y+size.height+kLineWidth && y >= origin.y+size.height-kLineWidth){            return true //対辺側        }        return false    }        //線分の範囲を定める    func defineSpan(){        //X軸上の範囲を求める        if (size.width > 0){            //起点より左側            xFrom = origin.x;            xTo = origin.x + size.width;        }else{            //起点より右側            xFrom = origin.x + size.width;            xTo = origin.x;        }        //Y軸上の範囲を求める        if (size.height > 0){            //起点より上側            yFrom = origin.y;            yTo = origin.y + size.height;        }else{            //起点より下側            yFrom = origin.y + size.height;            yTo = origin.y;        }    }    }