//------------------------------------------------------------------------------
//  UAShapeItem.h　図形クラス
//------------------------------------------------------------------------------
#import <Cocoa/Cocoa.h>
#import <QuartzCore/QuartzCore.h>

@interface UAShapeItem : NSObject
@property CAShapeLayer *shapelayer;  //CAShapeLayerオブジェクト
@property CGPoint origin;       //矩形の原点
@property CGSize size;          //矩形のサイズ
@property BOOL unUsed;          //削除フラグ
@property NSInteger transformKind;   //変形方法
@property CGPoint fromPoint;    //変形（移動・拡大・縮小）の開始点
@property CGPoint toPoint;      //変形（移動・拡大・縮小）の終了点
//イニシャライザ
-(id)initWithPoint:(CGPoint)point;
//図形（矩形）の描画中の処理
-(void)shapeCreating:(CGPoint)toPoint;
//図形（矩形）の描画の完了
-(void)shapeCreated:(CGPoint)toPoint;
//図形の移動・拡大・縮小の開始
-(void)startTransform:(CGPoint)fromPoint;
//図形の移動・拡大・縮小中
-(void)updateTransform:(CGPoint)point;
//図形の移動・拡大・縮小の完了
-(void)performTransform:(CGPoint)toPoint;
//図形を選択状態にする
-(void)selectOn;
//図形を選択状態を解除する
-(void)selectOff;
//点が図形の中か否か
-(BOOL)inTheArea:(CGPoint)point;
//点同士は近いか？
-(BOOL)nearToPoint:(CGPoint)point;
@end


//------------------------------------------------------------------------------
//  UAShapeItem.m　図形クラス
//------------------------------------------------------------------------------
#import "UAShapeItem.h"
#import "NSBezierPath+MyBezierPath.h"

@interface UAShapeItem(){
    float xFrom, xTo, yFrom, yTo;
}
@end
static float const kLineWidth = 5.0;
@implementation UAShapeItem
//イニシャライザ
-(id)init{
    if (![super init]){
        return nil;
    }
    return [self initWithPoint:CGPointZero];
}
//指定イニシャライザ
-(id)initWithPoint:(CGPoint)point{
    if (![super init]){
        return nil;
    }
    //CAShapeLayerオブジェクト
    _shapelayer = [CAShapeLayer layer];
    _shapelayer.lineWidth = 1;                              //枠線の太さ
    _shapelayer.strokeColor = [NSColor blackColor].CGColor; //枠線の色
    _shapelayer.fillColor = [NSColor clearColor].CGColor;   //塗りつぶし透明
    //フラグ
    _unUsed = NO;
    //開始点
    _origin.x = point.x;
    _origin.y = point.y;
    //サイズ
    _size.width = 0;
    _size.height = 0;
    //変形の開始点
    _transformKind = 0;
    _fromPoint = point;
    _toPoint = NSZeroPoint;
    return self;
}
//図形描画中の処理：イメージの表示
-(void)shapeCreating:(CGPoint)point{
    _size.width = point.x - _origin.x;
    _size.height = point.y - _origin.y;
    CGRect rect = CGRectMake(_origin.x, _origin.y, _size.width, _size.height); //矩形の位置と大きさ
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//図形描画の完了
-(void)shapeCreated:(CGPoint)toPoint{
    _toPoint = toPoint; //終点のセット
    [self shapeCreating:_toPoint];
    [self selectOn];
}
//図形の移動・拡大・縮小の開始
-(void)startTransform:(CGPoint)fromPoint{
    _fromPoint = fromPoint;
    // 開始点から変形方法を判定する
    if ([self onTheCorner:_fromPoint]){
        //四隅 ->　拡大/縮小
        _transformKind = 1;
    }else if([self onTheHolLine:_fromPoint]){
        //上辺/下辺 ->　垂直方向に拡大/縮小
        _transformKind = 2;
    }else if([self onTheVelLine:_fromPoint]){
        //右辺/左辺 ->　水平方向に拡大/縮小
        _transformKind = 3;
    }else if([self inTheArea:_fromPoint]){
        //矩形内 -> 移動
        _transformKind = 4;
    }
    return;
}
//図形の移動・拡大・縮小中
-(void)updateTransform:(CGPoint)point{
    if (_transformKind == 1){
        [self transformingXY:point];
    }else if (_transformKind == 2){
        [self transformingY:point];
    }else if (_transformKind == 3){
        [self transformingX:point];
    }else if (_transformKind == 4){
        [self moving:point];
    }
    //NSLog(@"updateTo selected:%ld", _formKind);
}
//図形の移動・拡大・縮小の完了
-(void)performTransform:(CGPoint)toPoint{
    _toPoint = toPoint;
    if (_transformKind == 1){
        //四隅 ->　拡大/縮小
        [self resizeYFrom:_fromPoint To:_toPoint];
        [self resizeXFrom:_fromPoint To:_toPoint];
    }else if (_transformKind == 2){
        //上辺/下辺 ->　垂直方向に拡大/縮小
        [self resizeYFrom:_fromPoint To:_toPoint];
    }else if (_transformKind == 3){
        //右辺/左辺 ->　水平方向に拡大/縮小
        [self resizeXFrom:_fromPoint To:_toPoint];
    }else if (_transformKind == 4){
        //矩形内 -> 移動
        [self moveFrom:_fromPoint To:_toPoint];
    }else{
        NSLog(@"論理エラーだよ　performTransform　transformKLind=%ld",_transformKind);
    }
    return;
}
//図形を選択状態にする
-(void)selectOn{
    _shapelayer.lineWidth = 2;                            //枠線の太さ
    _shapelayer.strokeColor = [NSColor redColor].CGColor; //枠線の色
}
//図形を選択状態を解除する
-(void)selectOff{
    _shapelayer.lineWidth = 1;                              //枠線の太さ
    _shapelayer.strokeColor = [NSColor blackColor].CGColor; //枠線の色
}
//縦・横方向に拡大/縮小中
-(void)transformingXY:(CGPoint)point{
    float width = 0;
    float height = 0;
    CGPoint basePoint = _origin;
    if (![self nearEqualXonSide:_fromPoint.x] && ![self nearEqualYonSide:_fromPoint.y]){
        //起点が原点の対角
        width = _size.width + (point.x - _fromPoint.x);
        height = _size.height + (point.y - _fromPoint.y);
    
    }else if(![self nearEqualXonSide:_fromPoint.x] && [self nearEqualYonSide:_fromPoint.y]){
        //起点は原点の水平方向
        basePoint.y = _origin.y + _size.height;
        width = _size.width + (point.x - _fromPoint.x);
        height = -_size.height + (point.y - _fromPoint.y);
    
    }else if([self nearEqualXonSide:_fromPoint.x] && ![self nearEqualYonSide:_fromPoint.y]){
        //起点は原点の垂直方向
        basePoint.x = _origin.x + _size.width;
        width = -_size.width + (point.x - _fromPoint.x);
        height = _size.height + (point.y - _fromPoint.y);

    }else if([self nearEqualXonSide:_fromPoint.x] && [self nearEqualYonSide:_fromPoint.y]){
        //起点が原点
        basePoint.y = _origin.y + _size.height;
        basePoint.x = _origin.x + _size.width;
        width = -_size.width + (point.x - _fromPoint.x);
        height = -_size.height + (point.y - _fromPoint.y);
    }
    CGRect rect = CGRectMake(basePoint.x, basePoint.y, width, height); //矩形の位置と大きさ
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//横方向に拡大/縮小中
-(void)transformingX:(CGPoint)point{
    //水平方向に拡大/縮小
    float distance = 0.0;
    distance = point.x - _fromPoint.x;
    CGRect rect = CGRectZero;;
    if ([self nearEqualXonSide:_fromPoint.x]){
        //自分側
        float x = _origin.x + distance;
        float width = _size.width - distance;
        rect = CGRectMake(x, _origin.y, width, _size.height); //矩形の位置と大きさ
    }else{
        //対辺側
        float width = _size.width + distance;
        rect = CGRectMake(_origin.x, _origin.y, width, _size.height); //矩形の位置と大きさ
    }
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//縦方向に拡大/縮小中
-(void)transformingY:(CGPoint)point{
    //垂直方向に拡大/縮小
    float distance = 0.0;
    distance = point.y - _fromPoint.y;
    CGRect rect = CGRectZero;;
    if ([self nearEqualYonSide:_fromPoint.y]){
        //自分側
        float y = _origin.y + distance;
        float height = _size.height - distance;
        rect = CGRectMake(_origin.x, y, _size.width, height); //矩形の位置と大きさ
    }else{
        //対辺側
        float height = _size.height + distance;
        rect = CGRectMake(_origin.x, _origin.y, _size.width, height); //矩形の位置と大きさ
    }
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//移動中
-(void)moving:(CGPoint)point{
    //原点までの距離
    CGSize distance = CGSizeMake(_fromPoint.x-_origin.x, _fromPoint.y-_origin.y);
    CGPoint nextPoint = CGPointMake(point.x-distance.width, point.y-distance.height);
    CGRect rect = CGRectMake(nextPoint.x, nextPoint.y, _size.width, _size.height); //矩形の位置と大きさ
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//図形のサイズ変更 横方向
-(void)resizeXFrom:(CGPoint)fromPoint To:(CGPoint)toPoint{
    float distance = 0.0;
    distance = toPoint.x - fromPoint.x;
    if ([self nearEqualXonSide:fromPoint.x]){
        //自分側
        _origin.x += distance;
        _size.width -= distance;
    }else{
        //対辺側
        _size.width += distance;
    }
    CGRect rect = CGRectMake(_origin.x, _origin.y, _size.width, _size.height); //矩形の位置と大きさ
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//図形のサイズ変更 縦方向
-(void)resizeYFrom:(CGPoint)fromPoint To:(CGPoint)toPoint{
    float distance = 0.0;
    distance = toPoint.y - fromPoint.y;
    if ([self nearEqualYonSide:fromPoint.y]){
        //自分側
        _origin.y += distance;
        _size.height -= distance;
    }else{
        //対辺側
        _size.height += distance;
    }
    CGRect rect = CGRectMake(_origin.x, _origin.y, _size.width, _size.height); //矩形の位置と大きさ
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
//図形の移動
-(void)moveFrom:(CGPoint)fromPoint To:(CGPoint)toPoint{
    _origin.x += toPoint.x - fromPoint.x;
    _origin.y += toPoint.y - fromPoint.y;
    CGRect rect = CGRectMake(_origin.x, _origin.y, _size.width, _size.height); //矩形の位置と大きさ
    NSBezierPath *rectBezier = [NSBezierPath bezierPathWithRect:rect]; //ベジエパスの作成
    _shapelayer.path = rectBezier.cgPath; //ベジエパスをレイヤーにセット
    rectBezier = nil; //ベジエパスの解放（必須ではないが）
}
// ---- 点の近似 -----
//点同士は近いか？
-(BOOL)nearToPoint:(CGPoint)point{
    if (fabs(_origin.x - point.x) <= kLineWidth &&
        fabs(_origin.y - point.y) <= kLineWidth ){
        return YES;
    }
    return NO;
}
//点は矩形の中か？
-(BOOL)inTheArea:(CGPoint)point{
    [self defineSpan];
    if (point.x >= xFrom - kLineWidth && point.x <= xTo + kLineWidth){
        if (point.y >= yFrom - kLineWidth && point.y <= yTo + kLineWidth){
            return YES;
        }
    }
    return NO;
}
//点は矩形の水平線上か？
-(BOOL)onTheHolLine:(CGPoint)point{
    [self defineSpan];
    if ([self nearEqualYbothSides:point.y]){
        if (point.x >= xFrom && point.x <= xTo){
            return YES;
        }
    }
    return NO;
}
//点は矩形の垂直線上か？
-(BOOL)onTheVelLine:(CGPoint)point{
    [self defineSpan];
    if ([self nearEqualXbothSides:point.x]){
        if (point.y >= yFrom && point.y <= yTo){
            return YES;
        }
    }
    return NO;
}
//点は矩形の線上か？
-(BOOL)onTheLine:(CGPoint)point{
    return ([self onTheVelLine:point] || [self onTheHolLine:point]);
}
//点は矩形の角の上か？
-(BOOL)onTheCorner:(CGPoint)point{
    [self defineSpan];
    if ([self nearEqualXbothSides:point.x] && [self nearEqualYbothSides:point.y]){
        return YES;
    }
    return NO;
}
//X値とほぼ等値か？（自分側と対辺側）
-(BOOL)nearEqualXbothSides:(float)x{
    return ([self nearEqualXonSide:x] || [self nearEqualXoffSide:x]);
}
//Y値とほぼ等値か？（自分側と対辺側）
-(BOOL)nearEqualYbothSides:(float)y{
    return ([self nearEqualYonSide:y] || [self nearEqualYoffSide:y]);
}
//X値とほぼ等値か？（自分側）
-(BOOL)nearEqualXonSide:(float)x{
    if (x <= _origin.x+kLineWidth && x >= _origin.x-kLineWidth){
        return YES;
    }
    return NO;
}
//X値とほぼ等値か？（対辺側）
-(BOOL)nearEqualXoffSide:(float)x{
    if (x <= _origin.x+_size.width+kLineWidth && x >= _origin.x+_size.width-kLineWidth){
        return YES;
    }
    return NO;
}
//Y値とほぼ等値か？（自分側）
-(BOOL)nearEqualYonSide:(float)y{
    if (y <= _origin.y+kLineWidth && y >= _origin.y-kLineWidth){
        return YES; //自分側
    }
    return NO;
}
//Y値とほぼ等値か？（対辺側）
-(BOOL)nearEqualYoffSide:(float)y{
    if (y <= _origin.y+_size.height+kLineWidth && y >= _origin.y+_size.height-kLineWidth){
        return YES; //対辺側
    }
    return NO;
}
//線分の範囲を定める
-(void)defineSpan{
    //X軸上の範囲を求める
    if (_size.width > 0){
        //起点より左側
        xFrom = _origin.x;
        xTo = _origin.x + _size.width;
    }else{
        //起点より右側
        xFrom = _origin.x + _size.width;
        xTo = _origin.x;
    }
    //Y軸上の範囲を求める
    if (_size.height > 0){
        //起点より上側
        yFrom = _origin.y;
        yTo = _origin.y + _size.height;
    }else{
        //起点より下側
        yFrom = _origin.y + _size.height;
        yTo = _origin.y;
    }
}
-(NSString*)description{
    NSString* text = [NSString stringWithFormat:@"x:%.0f y:%.0f w:%.0f h:%.0f",
                      _origin.x, _origin.y, _size.width, _size.height];
    return text;
}
@end
