//------------------------------------------------------------------------------//  UAView.h//------------------------------------------------------------------------------#import <Cocoa/Cocoa.h>@interface UAView : NSView@end//------------------------------------------------------------------------------//  UAView.m//------------------------------------------------------------------------------#import "UAView.h"#import <QuartzCore/QuartzCore.h>#import "NSBezierPath+MyBezierPath.h"@interface UAView()@property NSImage *image;               //イメージオブジェクト@property CALayer *imageLayer;          //描画イメージ@property CGPoint coordinate;           //位置座標@property CGFloat multiple;             //倍率@property CGPoint startPoint;           //ドラッグ開始ポイント@property CGPoint endPoint;             //ドラッグ終了ポイント@property CAShapeLayer *line;           //移動線@property BOOL selecting;               //選択中フラグ@property CALayer *highlightLayer;      //ハイライト矩形@property (weak) IBOutlet NSTextField *multipleField;    //倍率の表示@property (weak) IBOutlet NSTextField *coordinateXField; //位置座標Xの表示@property (weak) IBOutlet NSTextField *coordinateYField; //位置座標Yの表示@property (weak) IBOutlet NSTextField *widthField;       //幅の表示@property (weak) IBOutlet NSTextField *heightField;      //高さの表示@end@implementation UAView//オーバーライド ------------------------------------------------------------------//ファーストレスポンダーを受け付ける- (BOOL)acceptsFirstResponder{    return YES; // default NO}//初期処理-(void)awakeFromNib{    //ファイルを読み込む    [self readFile];    //プロパティの初期化    _coordinate = CGPointZero;  //位置座標    _multiple = 1.0;            //倍率    _selecting = NO;            //選択中フラグ    //画像の表示    _layer.backgroundColor = [NSColor whiteColor].CGColor;  //ビュー背景色    [self initialImage];    //画像（CALayerオブジェクト）を表示する    [self dispInfo];        //テキストフィールドに情報を表示する}//ウィンドウが非アクティブな状態でもマウスイベントが発生する- (BOOL) acceptsFirstMouse:(NSEvent *)e {    return YES;}//---- マウス操作 -----//マウスダウン- (void)mouseDown:(NSEvent *)event{    //[self log];    CGPoint p = [self convertPoint:event.locationInWindow fromView:nil];    //NSLog(@"%3.0f:%3.0f", p.x, p.y);    //始点が画像領域から外れている場合は、移動処理を行わない。_selectingは、NO    if(![self isInRect:p]){        return;    }    //移動線の始点    _selecting = YES;    _startPoint = [self convertPoint:event.locationInWindow fromView:nil];    [self.imageLayer addSublayer:_highlightLayer];}//マウスドラッグ- (void)mouseDragged:(NSEvent *)event{    if (!_selecting){        return;    }    //移動線を引く    _endPoint = [self convertPoint:event.locationInWindow fromView:nil];    [self drawLine];}//マウスアップ- (void)mouseUp:(NSEvent *)event{    if (!_selecting){        return;    }    //移動線の終点    _endPoint = [self convertPoint:event.locationInWindow fromView:nil];    _selecting = NO;    //移動線を消す    [_line removeFromSuperlayer];    _line = nil;    //画像を移動する    [self move];    [_highlightLayer removeFromSuperlayer];    //カーソルの移動距離    /*    CGFloat xl = fabs(_endPoint.x  - _startPoint.x);    CGFloat yl = fabs(_endPoint.y  - _startPoint.y);    CGFloat len = sqrt(pow(xl, 2.0) + pow(yl, 2.0));    NSLog(@"distance:%.0f",len);    */}//マウスホイールの回転：画像の拡大/縮小-(void)scrollWheel:(NSEvent *)theEvent {    self.multiple *= (1 +  0.1 * theEvent.deltaY);    [self transform];}//アクション ---------------------------------------------------------------------//実際のサイズに戻す-(IBAction)sizeReset:(id)sender{    self.multiple = 1.0;    _coordinate = CGPointZero;    self.imageLayer.transform = CATransform3DIdentity;  //元に戻す    [self dispInfo];}//2倍に拡大する-(IBAction)enlarge:(id)sender{    self.multiple *= 2.0;    [self transform];}//1/2に縮小する-(IBAction)downsize:(id)sender{    self.multiple *= 0.5;    [self transform];}//内部メソッド -------------------------------------------------------------------//ファイルを読み込む- (void)readFile{    //イメージファイルパス    NSString *folder = [NSString stringWithFormat:@"%@/Documents",NSHomeDirectory()];    NSString *path = [folder stringByAppendingString:@"/picture03.jpg"];    NSURL *url = [NSURL fileURLWithPath:path];    //NSImageオブジェクトに読み込む    self.image = [[NSImage alloc] initWithData:[NSData dataWithContentsOfURL:url]];}//画像（CALayerオブジェクト）を表示する-(void)initialImage{    //読み込んだ画像（NSImageオブジェクト）のサイズを取得し、rect構造体を作成する。    NSImageRep *imageRep = _image.representations[0];    CGRect imageRect = CGRectMake(0, 0,                                  imageRep.pixelsWide, imageRep.pixelsHigh);    //CALayerオブジェクト作成    self.imageLayer = [[CALayer alloc] init];    //拡大/縮小の起点は左下角にする    self.imageLayer.anchorPoint = CGPointMake(0, 0);    //位置とサイズを設定    self.imageLayer.frame = imageRect;    //画像をCALayerオブジェクトにセット    self.imageLayer.contents = _image;    //親ビューのレイヤーに追加する    [self.layer addSublayer:self.imageLayer];    //位置座標の初期化    _coordinate = CGPointZero;    //画像と同じ大きさのハイライト矩形（CALayerオブジェクト）を作成する。    _highlightLayer = [[CALayer alloc] init];    _highlightLayer.frame = self.imageLayer.frame;    _highlightLayer.backgroundColor = [NSColor yellowColor].CGColor;    _highlightLayer.opacity = 0.4;}//画像のアフィン変換-(void)transform{    //拡大/縮小    CATransform3D tfScale = CATransform3DMakeScale(_multiple, _multiple, 1.0);    //移動    CATransform3D tfMove = CATransform3DMakeTranslation(_coordinate.x, _coordinate.y, 0);    //パラメータの順に変換が行われる。拡大/縮小してから移動すること。    self.imageLayer.transform = CATransform3DConcat(tfScale, tfMove); //正    //self.imageLayer.transform = CATransform3DConcat(tfMove, tfScale); //誤    [self dispInfo];}//移動のための位置座標の変更-(void)move{    CGPoint point;    point.x = _coordinate.x + (_endPoint.x  - _startPoint.x);    point.y = _coordinate.y + (_endPoint.y  - _startPoint.y);    _coordinate = point;    [self transform];}//移動線を引く-(void)drawLine{    if (NSEqualPoints(_startPoint, _endPoint) ){        return;    }    [_line removeFromSuperlayer];    _line = nil;    NSBezierPath *path = [NSBezierPath bezierPath];    [path moveToPoint:_startPoint];    [path lineToPoint:_endPoint];    _line = [CAShapeLayer layer];    _line.path = path.cgPath;    _line.lineWidth = 2.0;    _line.strokeColor = [NSColor blackColor].CGColor;    [self.layer addSublayer:_line];    CGPathRelease(path.cgPath);}//クリックした点がイメージの中か？-(BOOL)isInRect:(CGPoint) point{    CGRect rect = self.imageLayer.frame;    if (point.x >= rect.origin.x && point.x <= (rect.origin.x+rect.size.width) &&        point.y >= rect.origin.y && point.y <= (rect.origin.y+rect.size.height)){        return YES;    }    return NO;}//テキストフィールドに情報を表示する- (void)dispInfo{    NSRect rect = _imageLayer.frame;    _multipleField.stringValue = [NSString stringWithFormat:@"%.2f", _multiple];    _coordinateXField.stringValue = [NSString stringWithFormat:@"%.2f", rect.origin.x];    _coordinateYField.stringValue = [NSString stringWithFormat:@"%.2f", rect.origin.y];    _widthField.stringValue = [NSString stringWithFormat:@"%.2f", rect.size.width];    _heightField.stringValue = [NSString stringWithFormat:@"%.2f", rect.size.height];}//ログ-(void)log{    NSLog(@"frame %3.0f:%3.0f %3.0fx%3.0f  origin %3.0f:%3.0f",          self.imageLayer.frame.origin.x, self.imageLayer.frame.origin.y,          self.imageLayer.frame.size.width, self.imageLayer.frame.size.height,          _coordinate.x, _coordinate.y);}-(IBAction)test:(id)sender{    CATransform3D tfScale = CATransform3DMakeScale(0.5, 0.5, 1.0);    CATransform3D tfMove = CATransform3DMakeTranslation(400.0, 300.0, 0);    //self.imageLayer.transform = CATransform3DConcat(tfScale, tfMove);  //OK    self.imageLayer.transform = CATransform3DConcat(tfMove, tfScale);  //NG}@end