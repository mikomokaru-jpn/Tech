private func sendRequest(request: URLRequest) -> String{
    //ネットワーク通信オブジェクトの生成（一時セッション）
    let configuration = URLSessionConfiguration.ephemeral
    let session = URLSession.init(configuration: configuration)
    var resultText = ""
    //同期用セマフォの作成
    let semaphore = DispatchSemaphore(value: 0)
    //データ送受信処理の定義
    let task = session.dataTask(with: request,completionHandler:
        {(data,response,error) in
        if let error = error{ //error=nil is OK
            //エラー発生
            print("HTTP request error occured \(error)")
            semaphore.signal()
            return
        }
        guard let validResponse = response as? HTTPURLResponse,
              let data = data else {
            //受信データがnil または　responseがキャストできないときはエラー
            print("response not received")
            semaphore.signal()
            return
        }
        if validResponse.statusCode != 200{
            //ステータスコード200(OK)以外はエラーとする
            print("status error \(validResponse.statusCode)")
            semaphore.signal()
            return
        }
        resultText  = String(decoding: data, as: UTF8.self)
        semaphore.signal()//処理の再開
    })
    task.resume() //実行
    semaphore.wait() //送受信が終了するまで待機する
    return resultText
}